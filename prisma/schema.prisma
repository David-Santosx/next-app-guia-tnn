generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  directUrl = env("DIRECT_URL")
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String           @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          String           @default("user")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  accounts      Account[]
  sessions      Session[]
  photos        Photo[]
  creationInfo  UserCreationInfo?
}

model UserCreationInfo {
  id              String   @id @default(cuid())
  userId          String   @unique
  ipAddress       String
  userAgent       String
  browser         String
  operatingSystem String
  device          String
  origin          String
  createdAt       DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdminCreationLog {
  id              String   @id @default(cuid())
  email           String
  ipAddress       String
  userAgent       String
  browser         String
  operatingSystem String
  device          String
  origin          String
  status          String   
  reason          String? 
  userId          String?
  createdAt       DateTime @default(now())
}

model Photo {
  id            String    @id @default(cuid())
  title         String
  description   String?
  location      String?
  url           String
  blobKey       String
  size          Int
  mimeType      String
  dateTaken     DateTime?
  photographer  String?   // Add this field
  uploadedAt    DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  uploadedById  String
  category      String    @default("general")
  isPublished   Boolean   @default(true)
  uploadedBy    User      @relation(fields: [uploadedById], references: [id])

  @@index([category])
  @@index([uploadedById])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

